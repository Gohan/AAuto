import fsys;
import util.metaProperty
namespace py3;

_msvcr100 = ..raw.loadDll("~\lib\py3\.res\DLLs\msvcr100.dll", ,"cdecl")
_dll = ..raw.loadDll( "~\lib\py3\.res\DLLs\Python34.dll", ,"cdecl")
 
import ..py3.object;
import ..py3.module;
import ..py3.dict;
import ..py3.list;
import ..py3.tuple;

var dll = _dll;
initialize = dll.api("Py_Initialize","int()")
isInitialized = dll.api("Py_IsInitialized","int()")
finalize = dll.api("Py_Finalize","int()") 
getVersion = dll.api("Py_GetVersion","string()")  

setPath = dll.api("PySys_SetPath","void(str)")
Py_GetPath = dll.api("Py_GetPath","pointer()")
getPath = function(){
	return( ..string.fromUnicode(Py_GetPath(),,true) ); 
}
appendPath = function(path,...){
	path = ..io.exist(path)
	if( path ){
		path = ..fsys.path.removeBackslash(path);//原始字符串尾部不能添加斜杠,也并没有被解析为转义符,只能去掉
		execf("sys.path.append(r'%s')",path) 
	}
	if(!...) return;
	appendPath(...);
}

PySys_SetArgv = dll.api("PySys_SetArgv","void(int argc,struct argv)")
setArgv = function(...){
	var argv = ...;
	if( type(argv) == type.string) argv = {...};
	for(k,v in argv){ 
		argv[k] = ..string.toUnicode(v);
	}
	
	PySys_SetArgv(#argv,{string v[]=argv})
}

main = function(...){
	if( _STUDIO_INVOKED ) error("py3.main函数必须在生成EXE以后才能使用！",2);
	
	var argv = ...;
	if( type(argv) == type.string) argv = {...};
	for(k,v in argv){ 
		argv[k] = ..string.toUnicode(v);
	}
	
	dll.Py_Main(#argv,#argv ? {string v[]=argv} : {string v[1] = {""} } );
}

Py_GetPythonHome = dll.api("Py_GetPythonHome","pointer()","cdecl") 
Py_SetPythonHome = dll.api("Py_SetPythonHome","void(str)","cdecl") 
getPythonHome = function(){
	return( ..string.fromUnicode(Py_GetPythonHome(),,true) ); 	
}
setPythonHome = function(str){
	return Py_SetPythonHome( ..string.toUnicode(str) );	
}

Py_GetProgramName = dll.api("Py_GetProgramName","str()","cdecl") 
Py_SetProgramName = dll.api("Py_SetProgramName","void(str)","cdecl")  
getProgramName = function(){
	return( ..string.fromUnicode(Py_GetProgramName(),,true) ); 	
}
setProgramName = function(str){
	return Py_SetProgramName( ..string.toUnicode(str) );	
}

PyRun_SimpleString = dll.api("PyRun_SimpleString","int(string Str)")
PyRun_SimpleStringFlags = dll.api("PyRun_SimpleStringFlags","int(string z, struct f)")
PyRun_SimpleFileExFlags = dll.api("PyRun_SimpleFileExFlags","int(pyObject dummy,string filename,int closeIt, struct f)")

Py_CompileStringFlags = dll.api("Py_CompileStringFlags","pyCodeObject(string str,string p,int start,struct f)")
class codeObject{
	ctor( object ){
		if(type(object)==type.pointer)
			this._object = object
		else 
			return null;
	}; 
	eval = function(g,l){
		if(!g)g=..py3.dict();
		if(!l)l=..py3.dict();
		return ..py3.object( PyEval_EvalCode(this._object,g,l) )
	} 
	exec = function(name){
		return ..py3.module( PyImport_ExecCodeModule(name,this._object) );
	}
} 
namespace codeObject{
	PyEval_EvalCode = dll.api("PyEval_EvalCode","pyObject(PyCodeObject *, pyObject *, pyObject *)") 
	PyImport_ExecCodeModule = dll.api("PyImport_ExecCodeModule","pyObject(string name, PyCodeObject *)")  
}

compile = function(str,f,s){ 
	str = ..string.fromto(str,0,65001);
	return codeObject( Py_CompileStringFlags( str,str,s || 258/*_Py_eval_input*/, { int cf_flags = f  } ) )
}

compileFile = function(str,f){
	return compile(str,f,257/*_Py_file_input*/);
}

compileEval = function(str,f){
	return compile(str,f,258/*_Py_eval_input*/);
}

compileSingle = function(str,f){
	return compile(str,f,256/*_Py_single_input*/);
}

class PyCompilerFlags{ 
    int cf_flags; 
} 

execfile = function(filename,flag=0,...){
	filename = ..io.exist(filename)
	if(!filename) error("未找到文件",2);
 
	..fsys.setCurDir( ..fsys.getParentDir(filename) );
	
	if( ... && type(...) == type.string ){
		setArgv( ..io._exepath,filename,...) 
	} 
	
	var file = _msvcr100.fopen(filename,"r+b");
	if( !file ) error("打开文件失败",2);
	return PyRun_SimpleFileExFlags(topointer(file),filename,1,{int cf_flags=flag})!=-1;
}

exec = function(str,flag){
	..fsys.setCurDir( "\py3" );
	
	if( flag!==null ){ 
		return PyRun_SimpleStringFlags(..string.fromto(str,0,65001),{int cf_flags=flag})!=-1;
	}
	else {
		return PyRun_SimpleString(..string.fromto(str,0,65001))!=-1;
	} 
}
run = exec;

execf = function(str,...){
	return PyRun_SimpleString( ..string.fromto(..string.format(str,...),0,65001) )!=-1;
}
runFormat = execf;

self.eval = function(s){
	return addModule("__main__").getDict().eval(s);
}

PyImport_ImportModule = dll.api("PyImport_ImportModule","pyObject(str)"); 
PyImport_AddModule = dll.api("PyImport_AddModule","pyObject(str)");
importModule = function(name){
	var m =  PyImport_ImportModule(name);
	return m ? module( m );
}
addModule = function(name){ 
	var m = PyImport_AddModule(name); 
	if( m ){
		IncRef(m);//特例返回的是borrow reference  
		return module( m );
	}
}

PyEval_GetBuiltins = dll.api("PyEval_GetBuiltins","pyObject()")  
PyEval_GetGlobals = dll.api("PyEval_GetGlobals","pyObject()") 
PyEval_GetLocals =  dll.api("PyEval_GetLocals","pyObject()") 
globals = function(){
	return dict( PyEval_GetGlobals() )
}
locals = function(){
	return dict( PyEval_GetLocals() )
} 
builtins = function(){
	return dict( PyEval_GetBuiltins() )
}

PySys_GetObject  = dll.api("PySys_GetObject","pyObject(STRING name)");
getSysObject = function(name){
	if(!name) error("请使用参数@1指定对象名字",2)
	var p = PySys_GetObject( ..string.toUnicode(name) ); 
	if(p){ 
		return object(p);
	}	
}

DecRef  = dll.api("Py_DecRef","void(POINTER o)");
IncRef  = dll.api("Py_IncRef","void(POINTER o)");

PyGILState_Ensure = dll.api("PyGILState_Ensure","pointer()")
PyGILState_Release = dll.api("PyGILState_Release","void(pointer state)")
PyThreadState_Get = dll.api("PyThreadState_Get","pointer()")
PyEval_ReleaseThread = dll.api("PyEval_ReleaseThread","pointer(pointer tstate)")
lock = function(proc,...){
	var state = PyGILState_Ensure(); 
	var ret = proc(...)
	PyGILState_Release(state);
	return ret;
}
releaseThread = function(tstate){
	if(!tstate) tstate = PyThreadState_Get();
	PyEval_ReleaseThread( tstate );
} 

if( !isInitialized() ) begin
	var appPath = ..fsys.path.removeBackslash( ..io.fullpath("\")  );
	var pyHome = ..fsys.path.removeBackslash( ..io.fullpath("\py3")  );
	..fsys.setCurDir( appPath )
	
	setPythonHome( pyHome ); 
	setProgramName( appPath ); /* optional but recommended */
	
	var zipPath = ..io.exist("~\lib\py3\.res\Lib.zip") 
	if( !zipPath ){
		error("没有找到python标准库",2)
	}
	 
	 
	zipPath = ..string.toUnicode(zipPath);
	::CopyMemory( Py_GetPath(),zipPath,#zipPath + 2);//没初始化以前不能调用setPath() 只能这样搞
	initialize();
	
	//初始化GIL
	_dll.PyEval_InitThreads(); 
	
		setArgv( ..io._exepath,_CMDLINE );
		setPythonHome( pyHome ); 
		setProgramName( appPath );  
		exec("import sys"); 
		appendPath( pyHome,appPath,..io.fullpath("~\lib\py3\.res\") );//需要放在import sys之后
		
		 //把python27自带的DLLs目录下需要的pyd文件放到下面的目录中,加载这些pyd需要自行安装vc2008运行库(注意不能装SP1)
		appendPath( _STUDIO_INVOKED ? "~\lib\py3\.res\DLLs" : "\py3\DLLs" );
end else begin
    

end;

..table.add_gc( 
	self,
	function(){ 
		if(isInitialized()){
			PyGILState_Ensure();//这个其实多次调用只是返回null,所以无论如何调用一次保证取到GIL锁
			finalize();
		}
	} 
)

/*
python引用主数主要分为: 
1、new reference(owned reference) 增加计数的引用
2、borrow reference 不增加计数直接盗用

引用计数的规则与COM规则类似,
传入参数基本是borrow reference,
函数返回对象指针基本是new reference,

但是返回值也有下面这几个函数是例外，
返回引用计数是borrow reference（借用,就是不增加引用计数）
	PyList_GetItem()
	PyTuple_GetItem()
	PyDict_GetItem()
	PyDict_GetItemString()
	PyImport_AddModule()  
	也就是对于这几个函数的返回值要自行调用 py3.IncRef() 增加引用计数
	这些都是数组、字典中操作频繁的函数，而 PyImport_AddModule() 一般是用不到返回值的,如果设计可能是为了优化性能。

另外传入参数也有几个引用计数不是borrow reference，
而是steal reference（盗用，也是不增加引用计数，注意指针应当被盗走由接收输入参数的对象负责释配对释放一次计数）
	PyTuple_SetItem() 
	PyList_SetItem()  
*/

/*
https://docs.python.org/3/c-api/
调用python3扩展库的AAuto应用程序在发布后将python运行库自动复制到应用程序\lib\py3\.res\DLLs目录下。
其他所有pyd组件请复制到该目录下（用不到的pyd可以删除）。

如果希望生成单个EXE文件，请使用精简的py扩展库(python2.7）,
注意py扩展库不支持pyd组件,例如socket,sqlite3都不支持。

至于GIL(多线程锁）,这里也实现了lock函数用于支持GIL,
不过python的多线程不但是非常麻烦，而且同时只能运行一个线程，多线程没有多大意义。
所以最好不要去使用GIL,另外测试pyd也因为GIL的问题无法正常加载,所以使用本支持库原则上放弃支持GIL,pyd
*/

/**intellisense(py3)
_dll = !dllmodule.
getVersion() = 返回python内核版本\n字符串值
getPythonHome() = 返回python目录
setPythonHome("__") = 改变python应用程序目录
getProgramName() =  返回程序名
setProgramName("__") = 修改程序名
getPath() = 返回默认搜索路径\n以分号隔开
setPath() = 设置默认搜索路径\n以分号隔开
appendPath( = 添加默认搜索路径
appendPath(.("搜索路径") = 支持多个参数
main(.(->->->) = 直接输入启动参数启动python解释器\n类似调用python.exe,该函数只能在生成EXE以后调用
setArgv(.("启动参数") = 设置sys.argv启动参数,\n参数可以是任意个字符串参数，\n也可传入一个字符串数组
initialize() = 初始化python运行库,导入库时自动调用此函数
finalize() = 关闭Python解释器，释放解释器所占用的资源,\n不再使用py库时自动调用此函数
isInitialized() = python运行库是否初始化
eval(.("python表达式") = 在 __main__ 模块中计算表达式的值
eval() = !pyObject.
execf( = 首先调用string.format格式化代码\n然后执行格式化后的代码
execf(.("python代码",->->->) = 参数用法请参考string.format
exec("__") = 在默认的__main__名字空间运行python代码\n成功返回true
exec("__",) = 在默认的__main__名字空间运行python代码\n成功返回true\n可选增加第二个参数,设置PyCompilerFlags参数
execfile("__") = 运行py文件\n成功返回true
execfile("__",) = 运行py文件 \n成功返回true\n可选增加第二个参数,设置PyCompilerFlags参数,\n可选增加任意个启动参数,即sys.argv参数
getDict(__/*模块指针*/) = 相当于Python模块对象的__dict__ 属性，得到模块名称空间下的字典对象
builtins = 局部名字空间\n!pyDict.
DecRef(.(指针) = 减少引用计数
IncRef(.(指针) = 增加引用计数
_buildValueByNumber(.(数值) = 该函数将数值转换为python对象指针,已增加引用计数
_buildValueByString(.(字符串,字符串长度) = 该函数将字符串转换为python对象指针,已增加引用计数
end intellisense**/

/**intellisense()
py3 = python支持库\n如果需要在python中使用print函数输出到控制台\n请在导入库以前调用io.open()
py3.importModule("__/*模块名*/") =  导入模块，相当于Python内建函数__import__()\n返回模块指针 
py3.importModule() = !pyModule.
py3.addModule("__main____") =  创建新模块
py3.addModule() = !pyModule.

py3.compile("__") = 编译字符串或py文件\n返回代码对象\n可选增加第二个参数\n可选增加第二个PyCompilerFlags参数
py3.compile() = !pyCodeObject.
!pyCodeObject.eval() = 运行python代码并返回值\n可选增加两个参数,指定全局名字空间,局部名字空间\n名字空间必须是py.dict()字典对象\n!pyObject.
!pyCodeObject.exec("__/*模块名*/") = 运行python代码并返回模块对象\n!pyModule.
py3.globals() = 全局名字空间\n!pyDict.
py3.locals() = 局部名字空间\n!pyDict.
py3.builtins() = 内建名字空间\n!pyDict. 
py3.getSysObject(.("名字") = 获取sys对象\n!pyObject.
py3.releaseThread() = 释放GIL线程锁\n调用此函数以后,所有调用python的代码必须在py.lock中运行\n否则将导致进程异常退出,请小心使用,\npython没有真正多线程,尽可能不要使用此函数以带来不必要的麻烦
py3.lock( 回调函数,->->-> ) = @.lock(\n	function(){\n		__/*释放GIL以后所有调用python代码必须写到这里*/	\n	}\n)	
end intellisense**/

/**intellisense()
_Py_single_input=@256/*_Py_single_input*/
_Py_file_input=@257/*_Py_file_input*/
_Py_eval_input=@258/*_Py_eval_input*/
end intellisense**/