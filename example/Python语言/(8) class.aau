//8) 类
import console;
console.open();

/*
python中对象属性的名字中下划线有特殊用途，这一点与AAuto相似。
不过python的下划线规则复杂一些：

1、__名字__  两个下划线开始结束为系统保留
2、__名字 两个下划线开始为私有属性
3、_名字 保护类型属性

在AAuto中则只有两种规则：
1、下划线开头的变量（不论是几个）一律是只读的赋值后不能修改。
2、下划线开始且完全大写的变量，只读且全局有效。
也就是说只限制写，不限制读取使用的权限。

相同的是在语义上都强调下划线开头的属性不要在外部使用。
但是在python的代码里还是经常能看到下划线到处飞使用的非常频繁。
但是在aauto里下划线开头的变量一般只在库内部使用，普通aauto代码中一般看不到下划线到处飞的现象。
*/

import py; 
pyCode = /***

#定义类,object是基类
class Stack(object): 
    def __init__(self): # 类似AAuto中的 ctor()构造函数
    	#python中的self类似AAuto中的this表示当前创建的对象实例,
    	#而aauto中的self表示的则是所有类创建的实例共享的私有名字空间,即类似于Python中的 类名.静态变量名字 
    	#aauto中的 self.stack(可以省略前面的self.) 等价于 python中的 Stack.stack
        self.stack = [ ]  #每个对象实例的成员
        Stack.stack = 123 #类的静态共享成员

    def push(self,object): #成员函数要显示的声明self参数,而aauto并不需要这样做
        self.stack.append(object)

    def pop(self):
        return self.stack.pop()

    def length(self):
        return len(self.stack)


s = Stack() #创建对象,与AAuto相同不需要 new关键字
s.push("Dave") #调用对象成员函数
x = s.pop()  #调用对象成员函数

#在python里不能象对付字典那样直接改用下标访问对象属性,aauto里可以这样写,aauto里所有对象、数组、字典都是表，用法都一样
#print s["pop"] 

#del s #删除对象,在AAuto里写为 s = null;

print( x )
print "|||",s.__class__ is Stack

***/
py.exec( pyCode ) //运行python代码

 
//下面是类似的AAuto代码
//=========================================================

class stack {

	ctor(){
		this.stack = {}; //每个对象实例的成员
		self.stack = 123; //类的静态共享成员
	};
	push = function(object){
		//aauto中类拥有私有的名字空间, 
		//访问全局名字空间的成员要在前面加上两点,例如 ..table (  实际上是global.table 的缩写形式 )
		..table.push(this.stack ,object);
	}
	pop = function(){
		return ..table.pop(this.stack)
	}
	length = function(){
		//AAuto并不需要在参数中显示传递this变量
		//而self在AAuto中表示的是当前名字空间(所有实例对象共享的),并不表示当前实例对象 
		//this才是表示当前实例对象,与C++,Javascript类似
		return #this.stack;
	} 
}

var s = stack(); //AAuto中一般不会大写类名,所有命名风格都是统一小写开始( 外部API以及COM函数通常首字母大写 )
s.push("Dave");

x = s.pop();
s = null; //这句代码在AAuto中一般可以省略
io.print( x );

/*
pytho属于强类型语言,对类型的要求严格并且不能随意转换，
定义的类创建的实例都可以在运行时使用 对象.__class__ is 类名 检测类型.

而 aauto 则是弱类型语言，典型的 duck type 方式，
一句在 aauto 中很常见的代码 hwnd = hwnd[["hwnd"]] : hwnd，aauto才不管你的 __class__是什么，
只要你能提供 hwnd就可以了，至于火星撞地球的机率hwnd不是一个窗口句柄谁在乎呢？！
AAuto里的class也不是类型，也没有严格的限制。

强类型语言更严谨，而弱类型语言更简单灵活，各有其存在的理由与适用的场景。
有的人说duck type不是真正的面向对象，象C++那样才叫“真正的面向对象”实际上这是一种非常狭隘的理解，
传统面向对象的模式近年来越来越多的被诟病，越来越多的人认为duck type才是“纯面向对象”，因为这类语言先天就是多态的，
也就无需去搞强类型语言的那一套复杂规则实现多态。“多用组合、少用继承”近年也被越来越多的提起，
这句话放到AAuto里，就是少用继承，多运用模块化。

AAuto是一个更重视、更好支持模块化的编程语言。
真正的模块化是指模块之间尽可能的趋近于零依赖，所以使用AAuto，你很少需要去吃力的安装一个模块，
然后去安装一大堆依赖模块，经过复杂的配置或工具包才能把一个程序的运行环境折腾好。
*/