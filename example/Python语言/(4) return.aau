//4) 连续赋值,多返回值

import console;
console.open()

import py;
pyCode = /***

def func():
	print("python可以用tuple(元组) 返回多个值,元组可以理解为只读的数组");
	return (1,2,3);#这里的括号实际上可以省略

print( func() );

#连续赋值 
(a,b,c) = 1,2,3 #这里a,b,c外面的括号也是可以省略的，省略就与aauto的语法一样了
print a #上面序列的成员也可以作为普通变量使用

#一个序列可以给另一个序列
(d,e,f) = (a,b,c)
print (d,e,f) #这里是一个序列,括号不是表示函数调用

#一个数组也可以赋值给一个序列
(x,y,z) = [7,8,9]
print x;

***/
py.exec( pyCode ) //运行python代码
 
 
//下面是类似的AAuto代码
//=========================================================

function func(x,y){  
	return 1,2,3;
}
io.print( func(1,2) );

/*
在AAuto中没有序列这个概念， (1,2,3) 仅返回第一个表达式的值,这里就是返回数值1,
如果需要用数组返回值，就要这样写 return {1;2;3} 外面是花括号,里面必须用分号分隔值
*/

//多赋值与python类似，只不过你不能写 (a,b,c) = 1,2,3
var a,b,c = 1,2,3 //注意python默认就是局部变量，在aauto中要加上var关键字才是局部变量

//要想把一个数组赋给多个值，就只能这样搞了：
var x,y,z = table.unpack( {7;8;9} );


//python在for语句中使用序列
//=========================================================

pyCode = /***
 
map = { "a"  : ( 1,2,3 ),
        "b"  : ( 4,5,6 ),
        "c"  : ( 7,8,9 )
      }
      
#序列还可以这样用 
for name, (n1,n2,n3) in map.items():
    print n1,n2,n3  

***/ 

py.exec( pyCode ) //运行python代码


//等价的aauto代码
//=========================================================

var map = { 
	a = { 1;2;3 }; //aauto里只有一种数据结构（表），都放在花括号里，即可以包含字典，也可以包含数组
	b = { 4;5;6 }; //记住用分号，不能用逗号
	c = { 7;8;9 }
}
      
for(k,v in map){
	var n1,n2,n3 = table.unpack(v); //上面python的代码就类似这样展开了一些变量到序列里面
    io.print( n1,n2,n3 );
} 